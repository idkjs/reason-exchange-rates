// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var ReactNative = require("react-native");
var Style$ReactNative = require("reason-react-native/src/apis/Style.bs.js");
var Utils$ReactTemplate = require("../utils/Utils.bs.js");
var Colors$ReactTemplate = require("../styles/Colors.bs.js");
var Currency$ReactTemplate = require("../models/Currency.bs.js");

var styles = ReactNative.StyleSheet.create({
      container: {
        backgroundColor: "#F5FCFF",
        alignItems: "center",
        flex: 1,
        justifyContent: "center",
        width: Style$ReactNative.pct(100)
      },
      currencyWrapper: {
        borderBottomColor: Colors$ReactTemplate.teal,
        borderBottomWidth: 1,
        alignItems: "center",
        flexDirection: "row",
        justifyContent: "space-between",
        padding: 20
      },
      currencyWrapperWithoutBorder: {
        alignItems: "flex-start",
        flexDirection: "row",
        justifyContent: "space-between",
        padding: 20
      },
      currency: {
        color: Colors$ReactTemplate.grey,
        fontSize: 64,
        fontWeight: "100",
        letterSpacing: 4
      },
      welcome: {
        fontSize: 20,
        textAlign: "center",
        margin: 10
      },
      instructions: {
        color: "#333333",
        textAlign: "center",
        marginBottom: 5
      }
    });

var Styles = /* module */[/* styles */styles];

var ppx_printed_query = "query rates($currency: String!)  {\nrates(currency: $currency)  {\ncurrency  \nrate  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "rates");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeArray(value$1);
        tmp = match$3 !== undefined ? match$3.map((function (value) {
                  var match = Js_json.decodeNull(value);
                  if (match !== undefined) {
                    return undefined;
                  } else {
                    var match$1 = Js_json.decodeObject(value);
                    var tmp;
                    if (match$1 !== undefined) {
                      var value$1 = Caml_option.valFromOption(match$1);
                      var match$2 = Js_dict.get(value$1, "currency");
                      var tmp$1;
                      if (match$2 !== undefined) {
                        var value$2 = Caml_option.valFromOption(match$2);
                        var match$3 = Js_json.decodeNull(value$2);
                        if (match$3 !== undefined) {
                          tmp$1 = undefined;
                        } else {
                          var match$4 = Js_json.decodeString(value$2);
                          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                        }
                      } else {
                        tmp$1 = undefined;
                      }
                      var match$5 = Js_dict.get(value$1, "rate");
                      var tmp$2;
                      if (match$5 !== undefined) {
                        var value$3 = Caml_option.valFromOption(match$5);
                        var match$6 = Js_json.decodeNull(value$3);
                        if (match$6 !== undefined) {
                          tmp$2 = undefined;
                        } else {
                          var match$7 = Js_json.decodeString(value$3);
                          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                        }
                      } else {
                        tmp$2 = undefined;
                      }
                      tmp = {
                        currency: tmp$1,
                        rate: tmp$2
                      };
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                    }
                    return Caml_option.some(tmp);
                  }
                })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$1));
      }
    } else {
      tmp = undefined;
    }
    return {
            rates: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(currency, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "currency",
                  currency
                ]]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var currency = variables.currency;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "currency",
                  currency
                ]]),
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var ExchangeRateQuery = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var FxQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

function FxList(Props) {
  var currency = Props.currency;
  var onCurrencyChange = Props.onCurrencyChange;
  var exchangeRateQuery = make(currency, /* () */0);
  return React.createElement(FxQuery[/* make */4], {
              variables: exchangeRateQuery.variables,
              children: (function (param) {
                  var result = param[/* result */0];
                  if (typeof result === "number") {
                    return React.createElement(ReactNative.ActivityIndicator, {
                                color: Colors$ReactTemplate.teal
                              });
                  } else if (result.tag) {
                    var match = result[0].rates;
                    if (match !== undefined) {
                      var realMatches = Belt_Array.keepMap(match, (function (match_) {
                              return match_;
                            }));
                      var decodedFx = Currency$ReactTemplate.json(realMatches);
                      var filterFx = function (index, item) {
                        var match = item[/* currency */0];
                        var exit = 0;
                        switch (match) {
                          case "BTC" : 
                          case "ETH" : 
                          case "EUR" : 
                          case "JPY" : 
                          case "LTC" : 
                          case "USD" : 
                              exit = 1;
                              break;
                          default:
                            return null;
                        }
                        if (exit === 1) {
                          var match$1 = currency !== item[/* currency */0];
                          if (match$1) {
                            var index$1 = index;
                            var param = item;
                            var currency$1 = param[/* currency */0];
                            console.log(currency$1, index$1);
                            var match$2 = index$1 === 3;
                            return React.createElement(ReactNative.TouchableOpacity, {
                                        style: match$2 ? styles.currencyWrapperWithoutBorder : styles.currencyWrapper,
                                        accessibilityLabel: "button",
                                        onPress: (function (_e) {
                                            return Curry._1(onCurrencyChange, currency$1);
                                          }),
                                        children: null,
                                        key: currency$1
                                      }, React.createElement(ReactNative.Text, {
                                            style: styles.currency,
                                            children: Utils$ReactTemplate.s(currency$1)
                                          }), React.createElement(ReactNative.Text, {
                                            style: styles.currency,
                                            children: Utils$ReactTemplate.s(param[/* rate */1])
                                          }));
                          } else {
                            return null;
                          }
                        }
                        
                      };
                      return React.createElement(ReactNative.View, {
                                  style: styles.container,
                                  children: Belt_Array.mapWithIndex(decodedFx, filterFx)
                                });
                    } else {
                      return React.createElement(ReactNative.Text, {
                                  children: "Loading"
                                });
                    }
                  } else {
                    return React.createElement(ReactNative.Text, {
                                children: "Error:"
                              });
                  }
                })
            });
}

var make$1 = FxList;

exports.Styles = Styles;
exports.ExchangeRateQuery = ExchangeRateQuery;
exports.FxQuery = FxQuery;
exports.make = make$1;
/* styles Not a pure module */
