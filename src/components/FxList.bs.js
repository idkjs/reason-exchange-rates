// Generated by BUCKLESCRIPT VERSION 5.0.0-dev.4, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var Text$BsReactNative = require("bs-react-native/src/components/text.js");
var View$BsReactNative = require("bs-react-native/src/components/view.js");
var Style$BsReactNative = require("bs-react-native/src/style.js");
var Utils$ReactTemplate = require("../utils/Utils.bs.js");
var Colors$ReactTemplate = require("../styles/Colors.bs.js");
var Currency$ReactTemplate = require("../models/Currency.bs.js");
var StyleSheet$BsReactNative = require("bs-react-native/src/styleSheet.js");
var TouchableOpacity$BsReactNative = require("bs-react-native/src/components/touchableOpacity.js");
var ActivityIndicator$BsReactNative = require("bs-react-native/src/components/activityIndicator.js");

var styles = StyleSheet$BsReactNative.create({
      container: Style$BsReactNative.style(/* :: */[
            Style$BsReactNative.width(/* Pct */Block.__(1, [100])),
            /* :: */[
              Style$BsReactNative.padding(/* Pt */Block.__(0, [20])),
              /* [] */0
            ]
          ]),
      currencyWrapper: Style$BsReactNative.style(/* :: */[
            Style$BsReactNative.padding(/* Pt */Block.__(0, [20])),
            /* :: */[
              Style$BsReactNative.flexDirection(/* Row */0),
              /* :: */[
                Style$BsReactNative.justifyContent(/* SpaceBetween */5),
                /* :: */[
                  Style$BsReactNative.alignItems(/* Center */2),
                  /* :: */[
                    Style$BsReactNative.borderBottomWidth(1),
                    /* :: */[
                      Style$BsReactNative.borderBottomColor(/* String */Block.__(0, [Colors$ReactTemplate.teal])),
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]
          ]),
      currencyWrapperWithoutBorder: Style$BsReactNative.style(/* :: */[
            Style$BsReactNative.padding(/* Pt */Block.__(0, [20])),
            /* :: */[
              Style$BsReactNative.flexDirection(/* Row */0),
              /* :: */[
                Style$BsReactNative.justifyContent(/* SpaceBetween */5),
                /* :: */[
                  Style$BsReactNative.alignItems(/* FlexStart */0),
                  /* [] */0
                ]
              ]
            ]
          ]),
      currency: Style$BsReactNative.style(/* :: */[
            Style$BsReactNative.fontSize(/* Float */Block.__(0, [64])),
            /* :: */[
              Style$BsReactNative.fontWeight(/* _100 */1055956338),
              /* :: */[
                Style$BsReactNative.color(/* String */Block.__(0, [Colors$ReactTemplate.grey])),
                /* :: */[
                  Style$BsReactNative.letterSpacing(4),
                  /* [] */0
                ]
              ]
            ]
          ])
    });

var Styles = /* module */[/* styles */styles];

var ppx_printed_query = "query rates($currency: String!)  {\nrates(currency: $currency)  {\ncurrency  \nrate  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "rates");
    var tmp;
    if (match$1 !== undefined) {
      var value$1 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeNull(value$1);
      if (match$2 !== undefined) {
        tmp = undefined;
      } else {
        var match$3 = Js_json.decodeArray(value$1);
        tmp = match$3 !== undefined ? match$3.map((function (value) {
                  var match = Js_json.decodeNull(value);
                  if (match !== undefined) {
                    return undefined;
                  } else {
                    var match$1 = Js_json.decodeObject(value);
                    var tmp;
                    if (match$1 !== undefined) {
                      var value$1 = Caml_option.valFromOption(match$1);
                      var match$2 = Js_dict.get(value$1, "currency");
                      var tmp$1;
                      if (match$2 !== undefined) {
                        var value$2 = Caml_option.valFromOption(match$2);
                        var match$3 = Js_json.decodeNull(value$2);
                        if (match$3 !== undefined) {
                          tmp$1 = undefined;
                        } else {
                          var match$4 = Js_json.decodeString(value$2);
                          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                        }
                      } else {
                        tmp$1 = undefined;
                      }
                      var match$5 = Js_dict.get(value$1, "rate");
                      var tmp$2;
                      if (match$5 !== undefined) {
                        var value$3 = Caml_option.valFromOption(match$5);
                        var match$6 = Js_json.decodeNull(value$3);
                        if (match$6 !== undefined) {
                          tmp$2 = undefined;
                        } else {
                          var match$7 = Js_json.decodeString(value$3);
                          tmp$2 = match$7 !== undefined ? match$7 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
                        }
                      } else {
                        tmp$2 = undefined;
                      }
                      tmp = {
                        currency: tmp$1,
                        rate: tmp$2
                      };
                    } else {
                      tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
                    }
                    return Caml_option.some(tmp);
                  }
                })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$1));
      }
    } else {
      tmp = undefined;
    }
    return {
            rates: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(currency, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "currency",
                  currency
                ]]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var currency = variables.currency;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "currency",
                  currency
                ]]),
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var ExchangeRateQuery = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var FxQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

var component = ReasonReact.statelessComponent("FxList");

function make$1(currency, onCurrencyChange, _children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (_self) {
              var exchangeRateQuery = make(currency, /* () */0);
              return ReasonReact.element(undefined, undefined, Curry.app(FxQuery[/* make */3], [
                              Caml_option.some(exchangeRateQuery.variables),
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              (function (param) {
                                  var result = param[/* result */0];
                                  if (typeof result === "number") {
                                    return ReasonReact.element(undefined, undefined, ActivityIndicator$BsReactNative.make(undefined, /* String */[Colors$ReactTemplate.teal], undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[]));
                                  } else if (result.tag) {
                                    var match = result[0].rates;
                                    if (match !== undefined) {
                                      var realMatches = Belt_Array.keepMap(match, (function (match_) {
                                              return match_;
                                            }));
                                      var decodedFx = Currency$ReactTemplate.json(realMatches);
                                      var filterFx = function (index, item) {
                                        var match = item[/* currency */0];
                                        var exit = 0;
                                        switch (match) {
                                          case "BTC" : 
                                          case "ETH" : 
                                          case "EUR" : 
                                          case "JPY" : 
                                          case "LTC" : 
                                          case "USD" : 
                                              exit = 1;
                                              break;
                                          default:
                                            return null;
                                        }
                                        if (exit === 1) {
                                          var match$1 = currency !== item[/* currency */0];
                                          if (match$1) {
                                            var index$1 = index;
                                            var param = item;
                                            var currency$1 = param[/* currency */0];
                                            console.log(currency$1, index$1);
                                            var match$2 = index$1 === 3;
                                            return ReasonReact.element(currency$1, undefined, TouchableOpacity$BsReactNative.make(undefined, "button", undefined, undefined, undefined, undefined, undefined, undefined, undefined, Caml_option.some(match$2 ? styles.currencyWrapperWithoutBorder : styles.currencyWrapper), undefined, (function (_e) {
                                                                return Curry._1(onCurrencyChange, currency$1);
                                                              }), undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[
                                                            ReasonReact.element(undefined, undefined, Text$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, Caml_option.some(styles.currency), undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[Utils$ReactTemplate.s(currency$1)])),
                                                            ReasonReact.element(undefined, undefined, Text$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, Caml_option.some(styles.currency), undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */[Utils$ReactTemplate.s(param[/* rate */1])]))
                                                          ]));
                                          } else {
                                            return null;
                                          }
                                        }
                                        
                                      };
                                      return ReasonReact.element(undefined, undefined, View$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, Caml_option.some(styles.container), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[Belt_Array.mapWithIndex(decodedFx, filterFx)]));
                                    } else {
                                      return ReasonReact.element(undefined, undefined, Text$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */["Loading"]));
                                    }
                                  } else {
                                    return ReasonReact.element(undefined, undefined, Text$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, /* array */["Error:"]));
                                  }
                                })
                            ]));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.Styles = Styles;
exports.ExchangeRateQuery = ExchangeRateQuery;
exports.FxQuery = FxQuery;
exports.component = component;
exports.make = make$1;
/* styles Not a pure module */
